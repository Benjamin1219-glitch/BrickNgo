<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Products - BrickNGo</title>
  <link rel="stylesheet" href="/style.css">
  <style>
    .filters-container { background: white; padding: 2rem; margin-bottom: 2rem; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
    .filters-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-bottom: 1rem; }
    .filter-group { display: flex; flex-direction: column; }
    .filter-group label { font-weight: 600; margin-bottom: 0.5rem; color: #333; }
    .filter-group input, .filter-group select { padding: 0.75rem; border: 1px solid #ddd; border-radius: 4px; }
    .products-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 2rem; margin-bottom: 2rem; }
    .product-card { background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.1); transition: transform 0.3s; }
    .product-card:hover { transform: translateY(-5px); box-shadow: 0 4px 12px rgba(0,0,0,0.15); }
    .product-image { width: 100%; height: 200px; object-fit: cover; }
    .product-info { padding: 1.5rem; }
    .product-name { font-size: 1.2rem; font-weight: 600; margin-bottom: 0.5rem; color: #333; }
    .product-category { font-size: 0.9rem; color: #667eea; margin-bottom: 0.5rem; }
    .product-description { font-size: 0.9rem; color: #666; margin-bottom: 1rem; line-height: 1.5; }
    .product-price { font-size: 1.5rem; font-weight: 700; color: #667eea; margin-bottom: 0.5rem; }
    .product-stock { font-size: 0.9rem; color: #48bb78; margin-bottom: 1rem; }
    .product-rating { font-size: 0.9rem; color: #f59e0b; margin-bottom: 1rem; }
    .add-to-cart-btn { width: 100%; padding: 0.75rem; background: #667eea; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 600; }
    .add-to-cart-btn:hover { background: #5568d3; }
    .pagination { display: flex; justify-content: center; gap: 0.5rem; margin: 2rem 0; }
    .pagination button { padding: 0.5rem 1rem; border: 1px solid #667eea; background: white; color: #667eea; border-radius: 4px; cursor: pointer; }
    .pagination button.active { background: #667eea; color: white; }
    .pagination button:disabled { opacity: 0.5; cursor: not-allowed; }
    .no-products { text-align: center; padding: 3rem; color: #666; }
  </style>
  <link rel="stylesheet" href="/css/session-styles.css">
</head>
<body>
  <%- include('partials/navbar') %>

  <main style="max-width: 1200px; margin: 2rem auto; padding: 0 2rem;">
    <h1 style="margin-bottom: 2rem;">Our Products</h1>

    <!-- Filters Section -->
    <div class="filters-container">
      <div class="filters-grid">
        <div class="filter-group">
          <label for="searchInput">Search</label>
          <input type="text" id="searchInput" placeholder="Search products...">
        </div>
        <div class="filter-group">
          <label for="categoryFilter">Category</label>
          <select id="categoryFilter">
            <option value="">All Categories</option>
            <option value="Bricks">Bricks</option>
            <option value="Cement">Cement</option>
            <option value="Sand">Sand</option>
            <option value="Aggregates">Aggregates</option>
            <option value="Steel">Steel</option>
            <option value="Blocks">Blocks</option>
            <option value="Others">Others</option>
          </select>
        </div>
        <div class="filter-group">
          <label for="minPrice">Min Price</label>
          <input type="number" id="minPrice" placeholder="Min ₹">
        </div>
        <div class="filter-group">
          <label for="maxPrice">Max Price</label>
          <input type="number" id="maxPrice" placeholder="Max ₹">
        </div>
        <div class="filter-group">
          <label for="sortBy">Sort By</label>
          <select id="sortBy">
            <option value="">Default</option>
            <option value="price">Price: Low to High</option>
            <option value="-price">Price: High to Low</option>
            <option value="-rating.average">Rating: High to Low</option>
            <option value="-createdAt">Newest First</option>
          </select>
        </div>
      </div>
      <div style="display: flex; gap: 1rem; margin-top: 1rem;">
        <button onclick="applyFilters()" style="padding: 0.75rem 2rem; background: #667eea; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 600;">
          Apply Filters
        </button>
        <button onclick="clearFilters()" style="padding: 0.75rem 2rem; background: #f56565; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 600;">
          Clear
        </button>
      </div>
    </div>

    <!-- Products Grid -->
    <div id="productsGrid" class="products-grid"></div>

    <!-- Pagination -->
    <div id="pagination" class="pagination"></div>
  </main>

  <script>
    const API_BASE = '/api';
    let currentPage = 1;
    let totalPages = 1;

    // Load products on page load
    document.addEventListener('DOMContentLoaded', () => {
      loadProducts();
      checkAuth();
    });

    // Check authentication status
    async function checkAuth() {
      try {
        const response = await fetch(`${API_BASE}/auth/me`, { credentials: 'include' });
        if (response.ok) {
          const data = await response.json();
          document.getElementById('authLink').textContent = data.user.name;
          document.getElementById('authLink').href = '#';
          document.getElementById('authLink').onclick = logout;
        }
      } catch (error) {
        // User not logged in, keep login link
      }
    }

    // Logout
    async function logout() {
      await fetch(`${API_BASE}/auth/logout`, { credentials: 'include' });
      window.location.reload();
    }

    // Load products from API
    async function loadProducts(page = 1) {
      try {
        const search = document.getElementById('searchInput').value;
        const category = document.getElementById('categoryFilter').value;
        const minPrice = document.getElementById('minPrice').value;
        const maxPrice = document.getElementById('maxPrice').value;
        const sort = document.getElementById('sortBy').value;

        let url = `${API_BASE}/products?page=${page}&limit=12`;
        if (search) url += `&search=${encodeURIComponent(search)}`;
        if (category) url += `&category=${category}`;
        if (minPrice) url += `&minPrice=${minPrice}`;
        if (maxPrice) url += `&maxPrice=${maxPrice}`;
        if (sort) url += `&sort=${sort}`;

        const response = await fetch(url, { credentials: 'include' });
        if (!response.ok) throw new Error('Failed to load products');

        const data = await response.json();
        displayProducts(data.products);
        
        currentPage = data.pagination.page;
        totalPages = data.pagination.pages;
        displayPagination();

      } catch (error) {
        console.error('Failed to load products:', error);
        document.getElementById('productsGrid').innerHTML = '<div class="no-products">Failed to load products. Please try again.</div>';
      }
    }

    // Display products
    function displayProducts(products) {
      const grid = document.getElementById('productsGrid');
      
      if (products.length === 0) {
        grid.innerHTML = '<div class="no-products">No products found matching your criteria.</div>';
        return;
      }

      grid.innerHTML = products.map(product => `
        <div class="product-card" onclick="window.location.href='/product?id=${product._id}'" style="cursor: pointer;">
          <img src="${product.image}" alt="${product.name}" class="product-image">
          <div class="product-info">
            <div class="product-category">${product.category}</div>
            <div class="product-name">${product.name}</div>
            <div class="product-description">${product.description.substring(0, 100)}...</div>
            <div class="product-price">₹${product.price} ${product.unit}</div>
            <div class="product-stock">${product.stock > 0 ? `In Stock: ${product.stock}` : 'Out of Stock'}</div>
            ${product.rating && product.rating.average ? `
              <div class="product-rating">⭐ ${product.rating.average.toFixed(1)} (${product.rating.count} reviews)</div>
            ` : ''}
            <button class="add-to-cart-btn" onclick="event.stopPropagation(); addToCart('${product._id}')" ${product.stock === 0 ? 'disabled' : ''}>
              ${product.stock > 0 ? 'Add to Cart' : 'Out of Stock'}
            </button>
          </div>
        </div>
      `).join('');
    }

    // Display pagination
    function displayPagination() {
      const container = document.getElementById('pagination');
      
      if (totalPages <= 1) {
        container.innerHTML = '';
        return;
      }

      let html = '';
      
      // Previous button
      html += `<button onclick="loadProducts(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>Previous</button>`;
      
      // Page numbers
      for (let i = 1; i <= totalPages; i++) {
        if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
          html += `<button class="${i === currentPage ? 'active' : ''}" onclick="loadProducts(${i})">${i}</button>`;
        } else if (i === currentPage - 3 || i === currentPage + 3) {
          html += `<span style="padding: 0.5rem;">...</span>`;
        }
      }
      
      // Next button
      html += `<button onclick="loadProducts(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>Next</button>`;
      
      container.innerHTML = html;
    }

    // Apply filters
    function applyFilters() {
      loadProducts(1);
    }

    // Clear filters
    function clearFilters() {
      document.getElementById('searchInput').value = '';
      document.getElementById('categoryFilter').value = '';
      document.getElementById('minPrice').value = '';
      document.getElementById('maxPrice').value = '';
      document.getElementById('sortBy').value = '';
      loadProducts(1);
    }

    // Add to cart
    async function addToCart(productId) {
      try {
        console.log('🛒 Adding product to cart:', productId);
        
        const response = await fetch(`${API_BASE}/cart/add`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify({ productId, quantity: 1 })
        });

        console.log('📦 Response status:', response.status);
        
        const data = await response.json();
        console.log('📦 Response data:', data);

        if (!response.ok) {
          if (response.status === 401) {
            alert('❌ Please login to add items to cart');
            window.location.href = '/login';
            return;
          }
          throw new Error(data.message || 'Failed to add to cart');
        }

        alert('✅ Product added to cart!');
        // Update cart count via session manager
        if (typeof sessionManager !== 'undefined') {
          await sessionManager.loadCartCount();
        }
      } catch (error) {
        console.error('❌ Failed to add to cart:', error);
        alert('❌ ' + error.message);
      }
    }
  </script>
  <script src="/js/session-manager.js"></script>
</body>
</html>
